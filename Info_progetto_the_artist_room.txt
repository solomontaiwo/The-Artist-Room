## The Artist Room

Link presentazione progetto: https://www.canva.com/design/DAF2Sa5JzyI/rRurYLQjj4uAHAvgEtEwiA/edit

0. Eseguire i seguenti comandi dopo aver clonato la repository:
    
    cd <nome_progetto>
    composer install
    cp .env.example .env
    php artisan key:generate
    php artisan config:cache

1. Creare schema del progetto con Mysql Workbench (o simili) utilizzando il seguente comando:
	
	CREATE SCHEMA `The_Artist_Room`;

	2.1 Creare seeder per le tabelle admin, users e rooms con i seguenti comandi: 

		php artisan make:seeder AdminSeeder
		(^ potrebbe già esistere)

		php artisan make:seeder UsersTableSeeder
		
		php artisan make:seeder RoomsTableSeeder
	
	e inserire i seguenti dati nella funzione run() dei vari file creati in app/database/seeders/*.php: 

		// ADMINS

		User::create([
            'name'          => 'Solomon',
            'surname'       => 'Taiwo',
            'email'         => 'solomontaiwo@theartistroom.com',
            'password'      => bcrypt('password'),
            'updated_at'    => date('Y-m-d h:i:s'),
            'created_at'    => date('Y-m-d h:i:s'),
            'is_admin'      => true,
        ]);

        User::create([
            'name'          => 'Gaia',
            'surname'       => 'Marzola',
            'email'         => 'gaiamarzola@theartistroom.com',
            'password'      => bcrypt('password'),
            'updated_at'    => date('Y-m-d h:i:s'),
            'created_at'    => date('Y-m-d h:i:s'),
            'is_admin'      => true,
        ]);

        User::create([
            'name'          => 'Giorgia',
            'surname'       => 'Pirelli',
            'email'         => 'giorgiapirelli@theartistroom.com',
            'password'      => bcrypt('password'),
            'updated_at'    => date('Y-m-d h:i:s'),
            'created_at'    => date('Y-m-d h:i:s'),
            'is_admin'      => true,
        ]);

        User::create([
            'name'          => 'Luca',
            'surname'       => 'Gaudenzi',
            'email'         => 'lucagaudenzi@theartistroom.com',
            'password'      => bcrypt('password'),
            'updated_at'    => date('Y-m-d h:i:s'),
            'created_at'    => date('Y-m-d h:i:s'),
            'is_admin'      => true,
        ]);

		// USERS

		DB::table('users')->insert([[
            'name'          => 'Pino',
            'surname'       => 'Pinoli',
            'email'         => 'pinopinoli@theartistroom.com',
            'password'      => bcrypt('password'),
            'updated_at'    => date('Y-m-d h:i:s'),
            'created_at'    => date('Y-m-d h:i:s'),
        ], [
            'name'          => 'Matteo',
            'surname'       => 'Solo',
            'email'         => 'matteosolo@theartistroom.com',
            'password'      => bcrypt('password'),
            'updated_at'    => date('Y-m-d h:i:s'),
            'created_at'    => date('Y-m-d h:i:s'),
        ], [
            'name'          => 'Harry',
            'surname'       => 'Potter',
            'email'         => 'harrypotter@theartistroom.com',
            'password'      => bcrypt('password'),
            'updated_at'    => date('Y-m-d h:i:s'),
            'created_at'    => date('Y-m-d h:i:s'),
        ], [
            'name'          => 'Ryu',
            'surname'       => 'Hayabusa',
            'email'         => 'ryuhayabusa@theartistroom.com',
            'password'      => bcrypt('password'),
            'updated_at'    => date('Y-m-d h:i:s'),
            'created_at'    => date('Y-m-d h:i:s'),
        ]]);

		// ROOMS

		DB::table('rooms')->insert([[
            'name'          => 'Aula Pirelloni',
            'description'   => 'Breve descrizione aula Pirelloni',
            'address'       => 'Via Dei Peracottari, 15',
            'size'          => 100, // metri quadri
            'seats'         => 50,
            'updated_at'    => date('Y-m-d h:i:s'),
            'created_at'    => date('Y-m-d h:i:s')
        ], [
            'name'          => 'Aula Gaudemagna',
            'description'   => 'Breve descrizione aula Gaudemagna',
            'address'       => 'Via Frassina, 51',
            'size'          => 20, // metri quadri
            'seats'         => 50,
            'updated_at'    => date('Y-m-d h:i:s'),
            'created_at'    => date('Y-m-d h:i:s')
        ], [
            'name'          => 'Aula Taiwani',
            'description'   => 'Breve descrizione aula Taiwani',
            'address'       => 'Via dei Marnoni, 2',
            'size'          => 150, // metri quadri
            'seats'         => 50,
            'updated_at'    => date('Y-m-d h:i:s'),
            'created_at'    => date('Y-m-d h:i:s')
        ], [
            'name'          => 'Aula Marzoletti',
            'description'   => 'Breve descrizione aula Marzoletti',
            'address'       => 'Via Edmondo De Amicis, 66',
            'size'          => 150, // metri quadri
            'seats'         => 50,
            'updated_at'    => date('Y-m-d h:i:s'),
            'created_at'    => date('Y-m-d h:i:s')
        ]]);
	
	Usare i seguenti comandi per popolare le tabelle con i dati già presenti nei file app/database/seeders/*.php::

		composer dump-autoload   
		php artisan db:seed
		[ Comando per singoli seed, non tutti: php artisan db:seed --class=UsersTableSeeder, 
                                               php artisan db:seed --class=AdminSeeder
                                               php artisan db:seed --class=RoomTableSeeder 
        ]

	Per vedere se i dati sono stati correttamente inseriti nel database, usare il seguente comando in Mysql Workbench:

		SELECT * FROM the_artist_room.rooms;
		SELECT * FROM the_artist_room.users;
        Ecc.

	[Usare il seguente comando per pulire e ricreare le tabelle: php artisan migrate:fresh]

3. Creazione modelli con migrazione e controllo per utenti, stanze e prenotazioni con i seguenti comandi:

	php artisan make:model User -m -c --resource
	php artisan make:model Room -m -c --resource
	php artisan make:model Booking -m -c --resource

e poi modificare opportunamente i seguenti file appena creati con gli attributi rilevanti:

	/database/migrations/*_create_bookings_table.php
	/database/migrations/*_create_rooms_table.php
	/database/migrations/*_create_users_table.php


4. Provare ad avviare il progetto con il comando

    php artisan serve

---- CONTROLLER e funzioni relative ----

BookingController 
    1. construct: per permettere l'utilizzo delle funzioni solo ad un utente autenticato;
    2. index: funzione che, per visualizzare l'elenco delle prenotazioni dell'utente, carica nella ariabel $user l'utente autenticato
    e poi nella variabile $bookings le sue prenotazioni;
    3. create: rimanda alla pagina di creazione di una nuova prenotazione, dopo aver caricato nella variable $rooms tutte le stanze;
    4. store: crea una nuova prenotazione, validando prima i dati messi in input dall'utente, e poi rimanda alla pagina che 
    mostra i dettagli sulla prenotazione;
    5. edit: carica tutte le stanze nella variable $rooms, che poi passa alla view di edit;
    6. update: funzione per aggiornare una prenotazione. Prima valida i dati ricevuti dall'utente, poi aggiorna i dati e modifica
    il numero di posti disponibili nelle varie stanze in base ai cambiamenti fatti;
    7. show: mostra tutte le prenotazioni fatte;
    8. confirmBooking: mostra la view di conferma della prenotazione appena inserita; 
    9. destroy: funzione per eliminare una prenotazione e, contestualmente, aggiornare il numero di posti disponibili.

HomeController
    1. index: visualizza la home

RoomController
    1. index;
    2. create;
    3. store;
    4. edit;
    5. update;
    6. show;
    7. destroy.
    8. getRoomInfo.

UserController
    1. index
    2. show;
    3. promoteToAdmin;
    4. destroy.

WhoAreWeController
    1. WhoAreWeController.

---- MODELLI e attributi ----

Booking:
    'room_id',
    'room_name',
    'user_id',
    'name',
    'surname',
    'arrival_date',
    'arrival_time',
    'departure_date',
    'departure_time',
    'people'

    Relazione belongsTo(User) e belongsTo(Room)

Room:
    'room_id',
    'name', 
    'description', 
    'address',
    'size',
    'available_seats'

    Relazione hasMany(Booking)

User:
    'name',
    'surname',
    'email',
    'password',
    'is_admin'

    Relazione hasMany(Booking)

 ---- REQUISITI MINIMI e ASPETTI DA IMPLEMENTARE ----

Requisiti minimi del progetto: 
1. Gestione di più livelli di utenti: amministratori, utenti, ospiti ... --> fatto
2. Almeno una entità con CRUD completo --> fatto (prenotazioni)
3. Gestione della validazione dei dati inseriti --> fatto (creazione e modifica delle prenotazioni, creazione aula) 
4. Almeno un inserimento o modifica di una entità sviluppato in AJAX --> modifica della stanza da parte di un admin? --> fatto con promozione ad admin e eliminazione utente

Aspetti da implementare:
- [x] Inserire tempo di arrivo e partenza come parametri delle prenotazioni

- [x] Fare logica per permettere agli amministratori di rendere admin altri utenti 
-> da view utenti visibile solo agli admin; in questa view si vedono tutti gli utenti , con le loro prenotazioni e la possibilità di eliminarli con 
una AJAX request

- [x] Fare in modo che gli utenti amministratori possano vedere tutte le prenotazioni eseguite da tutti gli utenti

- [x] Implementare AJAX -> implementare una JQuery (fatto) -> creare una AJAX request con JQuery (fatto)

- [x] Implementare animazioni con JQuery

- [x] Implementare homepage di Giorgia

- [x] Implementare codice per “che cosa dicono di noi”

- [x] Implementare avviso di errore di prenotazione stanza quando non ci sono posti disponibili -> 
implementata impossibilità di premere pulsante di prenotazione se i posti non sono disponibili

- [x] Rivedere RoomController 
-> rivisto inserendo logiche di creazione e modifica aula

- [ ] Rivedere pagina Mostre (VueJS)

- [ ] Vedere presentazione 

- [ ] Pensare a percorso guidato 